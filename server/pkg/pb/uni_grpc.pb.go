// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: proto/uni.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentSearchClient is the client API for StudentSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentSearchClient interface {
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error)
}

type studentSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentSearchClient(cc grpc.ClientConnInterface) StudentSearchClient {
	return &studentSearchClient{cc}
}

func (c *studentSearchClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error) {
	out := new(GetStudentResponse)
	err := c.cc.Invoke(ctx, "/StudentSearch/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentSearchServer is the server API for StudentSearch service.
// All implementations must embed UnimplementedStudentSearchServer
// for forward compatibility
type StudentSearchServer interface {
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error)
	mustEmbedUnimplementedStudentSearchServer()
}

// UnimplementedStudentSearchServer must be embedded to have forward compatible implementations.
type UnimplementedStudentSearchServer struct {
}

func (UnimplementedStudentSearchServer) GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudentSearchServer) mustEmbedUnimplementedStudentSearchServer() {}

// UnsafeStudentSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentSearchServer will
// result in compilation errors.
type UnsafeStudentSearchServer interface {
	mustEmbedUnimplementedStudentSearchServer()
}

func RegisterStudentSearchServer(s grpc.ServiceRegistrar, srv StudentSearchServer) {
	s.RegisterService(&StudentSearch_ServiceDesc, srv)
}

func _StudentSearch_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSearchServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentSearch/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSearchServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentSearch_ServiceDesc is the grpc.ServiceDesc for StudentSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudentSearch",
	HandlerType: (*StudentSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _StudentSearch_GetStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uni.proto",
}

// GroupSearchClient is the client API for GroupSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSearchClient interface {
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
}

type groupSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSearchClient(cc grpc.ClientConnInterface) GroupSearchClient {
	return &groupSearchClient{cc}
}

func (c *groupSearchClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/GroupSearch/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupSearchServer is the server API for GroupSearch service.
// All implementations must embed UnimplementedGroupSearchServer
// for forward compatibility
type GroupSearchServer interface {
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	mustEmbedUnimplementedGroupSearchServer()
}

// UnimplementedGroupSearchServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSearchServer struct {
}

func (UnimplementedGroupSearchServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupSearchServer) mustEmbedUnimplementedGroupSearchServer() {}

// UnsafeGroupSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSearchServer will
// result in compilation errors.
type UnsafeGroupSearchServer interface {
	mustEmbedUnimplementedGroupSearchServer()
}

func RegisterGroupSearchServer(s grpc.ServiceRegistrar, srv GroupSearchServer) {
	s.RegisterService(&GroupSearch_ServiceDesc, srv)
}

func _GroupSearch_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSearchServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupSearch/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSearchServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupSearch_ServiceDesc is the grpc.ServiceDesc for GroupSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupSearch",
	HandlerType: (*GroupSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _GroupSearch_GetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uni.proto",
}

// ProfessorSearchClient is the client API for ProfessorSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfessorSearchClient interface {
	GetProfessor(ctx context.Context, in *GetProfessorRequest, opts ...grpc.CallOption) (*GetProfessorResponse, error)
}

type professorSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewProfessorSearchClient(cc grpc.ClientConnInterface) ProfessorSearchClient {
	return &professorSearchClient{cc}
}

func (c *professorSearchClient) GetProfessor(ctx context.Context, in *GetProfessorRequest, opts ...grpc.CallOption) (*GetProfessorResponse, error) {
	out := new(GetProfessorResponse)
	err := c.cc.Invoke(ctx, "/ProfessorSearch/GetProfessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfessorSearchServer is the server API for ProfessorSearch service.
// All implementations must embed UnimplementedProfessorSearchServer
// for forward compatibility
type ProfessorSearchServer interface {
	GetProfessor(context.Context, *GetProfessorRequest) (*GetProfessorResponse, error)
	mustEmbedUnimplementedProfessorSearchServer()
}

// UnimplementedProfessorSearchServer must be embedded to have forward compatible implementations.
type UnimplementedProfessorSearchServer struct {
}

func (UnimplementedProfessorSearchServer) GetProfessor(context.Context, *GetProfessorRequest) (*GetProfessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfessor not implemented")
}
func (UnimplementedProfessorSearchServer) mustEmbedUnimplementedProfessorSearchServer() {}

// UnsafeProfessorSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfessorSearchServer will
// result in compilation errors.
type UnsafeProfessorSearchServer interface {
	mustEmbedUnimplementedProfessorSearchServer()
}

func RegisterProfessorSearchServer(s grpc.ServiceRegistrar, srv ProfessorSearchServer) {
	s.RegisterService(&ProfessorSearch_ServiceDesc, srv)
}

func _ProfessorSearch_GetProfessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorSearchServer).GetProfessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProfessorSearch/GetProfessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorSearchServer).GetProfessor(ctx, req.(*GetProfessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfessorSearch_ServiceDesc is the grpc.ServiceDesc for ProfessorSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfessorSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProfessorSearch",
	HandlerType: (*ProfessorSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfessor",
			Handler:    _ProfessorSearch_GetProfessor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uni.proto",
}

// StudentsSearchClient is the client API for StudentsSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsSearchClient interface {
	GetStudents(ctx context.Context, in *GetStudentAllRequest, opts ...grpc.CallOption) (*GetStudentAllResponse, error)
}

type studentsSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsSearchClient(cc grpc.ClientConnInterface) StudentsSearchClient {
	return &studentsSearchClient{cc}
}

func (c *studentsSearchClient) GetStudents(ctx context.Context, in *GetStudentAllRequest, opts ...grpc.CallOption) (*GetStudentAllResponse, error) {
	out := new(GetStudentAllResponse)
	err := c.cc.Invoke(ctx, "/StudentsSearch/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsSearchServer is the server API for StudentsSearch service.
// All implementations must embed UnimplementedStudentsSearchServer
// for forward compatibility
type StudentsSearchServer interface {
	GetStudents(context.Context, *GetStudentAllRequest) (*GetStudentAllResponse, error)
	mustEmbedUnimplementedStudentsSearchServer()
}

// UnimplementedStudentsSearchServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsSearchServer struct {
}

func (UnimplementedStudentsSearchServer) GetStudents(context.Context, *GetStudentAllRequest) (*GetStudentAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentsSearchServer) mustEmbedUnimplementedStudentsSearchServer() {}

// UnsafeStudentsSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsSearchServer will
// result in compilation errors.
type UnsafeStudentsSearchServer interface {
	mustEmbedUnimplementedStudentsSearchServer()
}

func RegisterStudentsSearchServer(s grpc.ServiceRegistrar, srv StudentsSearchServer) {
	s.RegisterService(&StudentsSearch_ServiceDesc, srv)
}

func _StudentsSearch_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsSearchServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentsSearch/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsSearchServer).GetStudents(ctx, req.(*GetStudentAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentsSearch_ServiceDesc is the grpc.ServiceDesc for StudentsSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudentsSearch",
	HandlerType: (*StudentsSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudents",
			Handler:    _StudentsSearch_GetStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uni.proto",
}

// DepartmentSearchClient is the client API for DepartmentSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentSearchClient interface {
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error)
}

type departmentSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentSearchClient(cc grpc.ClientConnInterface) DepartmentSearchClient {
	return &departmentSearchClient{cc}
}

func (c *departmentSearchClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error) {
	out := new(GetDepartmentResponse)
	err := c.cc.Invoke(ctx, "/DepartmentSearch/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentSearchServer is the server API for DepartmentSearch service.
// All implementations must embed UnimplementedDepartmentSearchServer
// for forward compatibility
type DepartmentSearchServer interface {
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	mustEmbedUnimplementedDepartmentSearchServer()
}

// UnimplementedDepartmentSearchServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentSearchServer struct {
}

func (UnimplementedDepartmentSearchServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedDepartmentSearchServer) mustEmbedUnimplementedDepartmentSearchServer() {}

// UnsafeDepartmentSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentSearchServer will
// result in compilation errors.
type UnsafeDepartmentSearchServer interface {
	mustEmbedUnimplementedDepartmentSearchServer()
}

func RegisterDepartmentSearchServer(s grpc.ServiceRegistrar, srv DepartmentSearchServer) {
	s.RegisterService(&DepartmentSearch_ServiceDesc, srv)
}

func _DepartmentSearch_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentSearchServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DepartmentSearch/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentSearchServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentSearch_ServiceDesc is the grpc.ServiceDesc for DepartmentSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DepartmentSearch",
	HandlerType: (*DepartmentSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartment",
			Handler:    _DepartmentSearch_GetDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uni.proto",
}
